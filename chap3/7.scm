#lang scheme

(require rackunit)

(define (make-account balance password)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (define (dispatch pw m)
    (if (not (eq? pw password))
        (lambda (x) "Incorrect password")
        (cond ((eq? m 'withdraw) withdraw)
              ((eq? m 'deposit) deposit)
              (else (error "Unknown request -- MAKE-ACCOUNT"
                           m)))))
  dispatch)

(define (make-joint acc old-pw new-pw)
  (define (authen pw m)
    (if (eq? pw new-pw)
        (acc old-pw m)
        (lambda (x) "Incorrect password")))
  (if (number? ((acc old-pw 'deposit) 0))
      authen
      (error "Authenrization failed -- MAKE-JOINT")))

(test-begin
 (let ([acc (make-account 100 'secret-password)])
   (check-equal? ((acc 'secret-password 'withdraw) 40) 60)
   (check-equal? ((acc 'some-other-password 'deposit) 50)
                 "Incorrect password")
   (let ([new-acc (make-joint acc 'secret-password 'new-password)])
     (check-equal? ((new-acc 'secret-password 'withdraw) 40)
                   "Incorrect password")
     (check-equal? ((new-acc 'new-password 'deposit) 50) 110)
     (check-equal? ((new-acc 'some-other-password 'deposit) 50)
                 "Incorrect password")
     (check-equal? ((acc 'new-password 'deposit) 50)
                 "Incorrect password")
     (check-equal? ((acc 'secret-password 'withdraw) 10) 100))))